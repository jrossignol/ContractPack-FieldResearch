// Contract for doing a certain experiment in different situations.
//   Author: nightingale

CONTRACT_TYPE
{
    name = FS_Experiment
    group = FieldResearch

    sortKey = 01.Experiment
    genericTitle = Perform experiment at various locations
    genericDescription = Perform an experiment in various situations.

    title = Perform @experiment.Name().ToLower().FirstCap() experiments on @targetBody
    description = Wernher is especially excited to try some @experiment.Name().ToLower() experiments at various locations on @targetBody.  We doubt the results will be much different from the last study Wernher commissioned...  but he's the boss!
    synopsis = Run the @experiment.Name().ToLower() experiments on @targetBody.
    completedMessage = Yup, that's definitely a lot of @experiment.Name().ToLower() results.  Just put the data in a spreadsheet and we'll look at it later.

    // Up to two
    maxSimultaneous = 2

    // Stop offering Kerbin contracts once the player orbits the sun
    prestige = OrbitedBodies().Contains(Sun()) ? [ Significant, Exceptional ] : [ Trivial, Significant, Exceptional ]

    // Always offered by the Field Research Team
    agent = Field Research Team

    targetBody = Prestige() == Trivial ? HomeWorld() : Prestige() == Significant ? @FieldResearch:l2Bodies.Where(cb => cb.HasSurface()).Random() : @FieldResearch:l3Bodies.Where(cb => cb.HasSurface()).Random()

    // Contract rewards
    rewardFunds = Random(20000.0, 30000.0)
    rewardReputation = Random(2.0, 5.0)

    // Exclusion list of experiments
    DATA
    {
        type = List<ScienceExperiment>

        hidden = true

        experiments = AvailableExperiments(@targetBody).ExcludeAll([ evaReport, crewReport, asteroidSample, surfaceSample ]).Where(exp => AllScienceSubjectsByBodyExperiment([@targetBody], [exp]).Count() >= 3)
    }

    DATA
    {
        type = ScienceExperiment

        uniquenessCheck = CONTRACT_ACTIVE
        hidden = true

        experiment = @experiments.SelectUnique()
    }

    DATA
    {
        type = List<ScienceSubject>

        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBodyExperiment([@targetBody], [@experiment])
        scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => s.CollectedScience() == 0.0)
        scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => !s.Biome().IsKSC())
        scienceSubjects = @scienceSubjectsTemp3.Random(3)
    }

    DATA
    {
        type = ScienceRecoveryMethod

        hidden = true

        recoveryMethod = @targetBody.IsHomeWorld() || @targetBody.Parent().IsHomeWorld() ? Ideal : RecoverOrTransmit
    }

    REQUIREMENT
    {
        type = Expression
        expression = @/scienceSubjects.Count() == 3

        title = Must have a valid experiment to perform
    }

    PARAMETER
    {
        type = CollectScience

        biome = @scienceSubject.Biome()
        situation = @scienceSubject.Situation()
        experiment = @scienceSubject.Experiment()
        recoveryMethod = @/recoveryMethod

        rewardFunds = Random(10000.0, 15000.0)

        ITERATOR
        {
            type = ScienceSubject
            scienceSubject = @/scienceSubjects
        }
    }

    REQUIREMENT
    {
        type = FirstLaunch
    }
}
