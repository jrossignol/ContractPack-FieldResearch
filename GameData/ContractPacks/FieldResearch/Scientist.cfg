// Contract for researching science that already has some work done on it.
//   Author: nightingale

CONTRACT_TYPE
{
    name = FS_Scientist
    group = FieldResearch

    sortKey = 03.Scientist
    genericTitle = Help a scientist perform experiments
    genericDescription = Help a renowned scientist perform experiments at a specific location.

    title = Help a scientist perform experiments at @/biome.
    description = Renowned scientist @scientist would like to perform some experiments near a specific location at @/biome.  Wernher has strongly suggested that this scientist should be treated with the utmost respect, as they are a prominent member of the Society of Rocketologists.
    synopsis = Bring @scientist to perform experiments near @/waypoint.Name() at @/biome.
    completedMessage = Wernher is very pleased, he wouldn't have been able to attend the Rocketologist's gala if something had gone wrong!

    // Only one of these at once
    maxSimultaneous = 1

    prestige = Significant
    prestige = Exceptional

    // Always offered by the Field Research Team
    agent = Field Research Team

    targetBody = @validBodies.Random()

    // Contract rewards
    rewardFunds = Random(65000.0, 90000.0)
    rewardReputation = Random(10.0, 15.0)

    DATA
    {
        type = List<CelestialBody>
        hidden = true

        validBodies = Prestige() == Significant ? [ HomeWorld() ] : @FieldResearch:l2Bodies
    }

    DATA
    {
        type = Biome
        hidden = true

        biome = @/WaypointGenerator.Waypoints().First().Location().Biome()
    }

    DATA
    {
        type = List<ScienceSubject>
        hidden = true

        scienceSubjectsTemp1 = AllScienceSubjectsByBiome([@biome])
        scienceSubjectsTemp2 = @scienceSubjectsTemp1.Where(s => s.Situation() == SrfLanded)
        scienceSubjectsTemp3 = @scienceSubjectsTemp2.Where(s => s.NextScienceReportValue() > 1.0)
        scienceSubjectsTemp4 = @scienceSubjectsTemp3.Where(s => s.Experiment() != evaReport && s.Experiment() != surfaceSample && !s.Experiment().ID().StartsWith("ROCScience_"))
        scienceSubjects = @scienceSubjectsTemp4.Where(s => !s.Biome().IsKSC()).Random(3)
    }

    REQUIREMENT
    {
        type = Expression
        expression = @/scienceSubjects.Count() >= 3

        title = Must have valid experiments to run
    }

    DATA
    {
        type = Waypoint
        hidden = true

        waypoint = @WaypointGenerator.Waypoints().First()
    }

    DATA
    {
        type = Kerbal
        hidden = true

        scientist = NewKerbalWithTrait("Scientist")
    }

    PARAMETER
    {
        name = VPG
        type = VesselParameterGroup
        title = Bring @/scientist to the waypoint

        PARAMETER
        {
            name = HasCrew
            type = HasCrew

            trait = Pilot
        }

        PARAMETER
        {
            name = HasPassengers
            type = HasPassengers
        }

        PARAMETER
        {
            name = VisitWaypoint
            type = VisitWaypoint

            hideOnCompletion = false
            showMessages = true
        }

        PARAMETER
        {
            name = CollectScience
            type = CollectScience

            title = Perform the experiments at the waypoint

            subject = @/scienceSubjects
            recoveryMethod = None

            completeInSequence = true
        }
    }

    PARAMETER
    {
        name = RecoverKerbal
        type = RecoverKerbal

        disableOnStateChange = false

        completeInSequence = true
    }

    BEHAVIOUR
    {
        name = WaypointGenerator
        type = WaypointGenerator

        RANDOM_WAYPOINT
        {
            icon = ContractPacks/FieldResearch/Icons/research

            altitude = 0.0
            waterAllowed = false
        }
    }

    BEHAVIOUR
    {
        name = SpawnPassengers
        type = SpawnPassengers

        kerbal = @/scientist
        kerbalType = Crew
    }

    // Done a flyby of at least one child body
    REQUIREMENT
    {
        type = Expression
        expression = AllBodies().Where(cb => cb.Parent() == (@FieldResearch:homeIsMoon ? HomeWorld().Parent() : HomeWorld()) && cb.HaveReached()).Count() > 0

        title = Must have done a flyby of at least one moon
    }
}
