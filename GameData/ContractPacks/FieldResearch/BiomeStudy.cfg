// Contract for doing experiments in one biome.
//   Author: nightingale

CONTRACT_TYPE
{
    name = FS_BiomeStudy
    group = FieldResearch

    sortKey = 02.Biome
    genericTitle = Perform a study of a specific biome
    genericDescription = Perform a varity of experiments in different situations in one biome.

    title = Biome study of @biome
    description = It's a commonly known fact that @biome.FullName() is one of the most interesting places around!  We'd like to know more about it, let's do a study!
    synopsis = Perform the requested experiments at @biome.FullName().
    completedMessage = One of the most important things we've learned about @biome.FullName() is that it's not as interesting as we first thought.

    // Up to two
    maxSimultaneous = 2

    // Always offered by the Field Research Team
    agent = Field Research Team

    targetBody = Prestige() == Trivial ? HomeWorld() : Prestige() == Significant ? @FieldResearch:l2Bodies.Random() : @FieldResearch:l3Bodies.Random()

    // Contract rewards
    rewardFunds = Random(12500.0, 15000.0)
    rewardReputation = Random(2.0, 5.0)

    DATA
    {
        type = Biome
        uniquenessCheck = CONTRACT_ACTIVE
        hidden = true

        biome = @targetBody.Biomes().Where(b => b.RemainingScience() > 50.0).SelectUnique()
    }

    DATA
    {
        type = List<ScienceSubject>

        hidden = true

        scienceSubjects = AllScienceSubjectsByBiome([@biome]).Where(s => s.CollectedScience() == 0.0).Random(8)
    }

    DATA
    {
        type = ScienceRecoveryMethod

        hidden = true

        recoveryMethod = @targetBody.IsHomeWorld() || @targetBody.Parent().IsHomeWorld() ? Ideal : RecoverOrTransmit
    }

    REQUIREMENT
    {
        type = Expression
        expression = @/scienceSubjects.Count() >= 5

        title = Must have a valid biome to study
    }

    PARAMETER
    {
        type = CollectScience

        subject = @/scienceSubjects.Where(s => s.Situation() == @experimentSituation)
        recoveryMethod = @/recoveryMethod

        rewardFunds = 10000.0 + Random(4950.0, 5050.0) * @subject.Count()

        ITERATOR
        {
            type = ExperimentSituations

            experimentSituation = [ SrfLanded, SrfSplashed, FlyingLow, FlyingHigh, InSpaceLow, InSpaceHigh ]
        }

        REQUIREMENT
        {
            type = Expression
            expression = @../subject.Count() > 0
        }
    }

    REQUIREMENT
    {
        type = Orbit
        targetBody = HomeWorld()
    }
}
